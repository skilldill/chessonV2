type PieceLetter = "P" | "N" | "B" | "R" | "Q" | "K";

type PieceValues = Partial<Record<PieceLetter, number>>;

interface MaterialResult {
  white: {
    pawns: number;          // —Å—É–º–º–∞—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –ø–µ—à–∫–∞—Ö
    percentOfStart: number; // % –æ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (35 –ø–æ –¥–µ—Ñ–æ–ª—Ç—É)
    shareOfRemaining: number; // % –æ—Ç –æ–±—â–µ–≥–æ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ –¥–æ—Å–∫–µ
  };
  black: {
    pawns: number;
    percentOfStart: number;
    shareOfRemaining: number;
  };
}

/**
 * –°—á–∏—Ç–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª (–≤ –ø–µ—à–µ—á–Ω—ã—Ö —ç–∫–≤.) –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.
 * @param fen FEN-—Å—Ç—Ä–æ–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å: —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
 * @param color "white" | "black" ‚Äî –Ω–∞ –ª–æ–≥–∏–∫—É –Ω–µ –≤–ª–∏—è–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è UI-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
 * @param values –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–∏–≥—É—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: P=1, N=2, B=2, R=5, Q=9, K=0)
 */
export function getMaterialPercents(
  fen: string,
  values: PieceValues = {}
): MaterialResult {
  // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—à–µ—á–Ω—ã–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç)
  const VALS: Record<PieceLetter, number> = {
    P: values.P ?? 1,
    N: values.N ?? 2,
    B: values.B ?? 2,
    R: values.R ?? 5,
    Q: values.Q ?? 9,
    K: values.K ?? 0, // –∫–æ—Ä–æ–ª—è –≤ –º–∞—Ç–µ—Ä–∏–∞–ª –æ–±—ã—á–Ω–æ –Ω–µ –≤–∫–ª—é—á–∞—é—Ç
  };

  // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –±–µ–∑ –∫–æ—Ä–æ–ª—è:
  // 8P + 2N + 2B + 2R + 1Q = 8*1 + 2*2 + 2*2 + 2*5 + 1*9 = 35 (–ø–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º VALS)
  const START_MATERIAL =
    8 * VALS.P + 2 * VALS.N + 2 * VALS.B + 2 * VALS.R + 1 * VALS.Q;

  const board = fen.trim().split(" ")[0] ?? "";
  const counts = {
    white: { P: 0, N: 0, B: 0, R: 0, Q: 0, K: 0 } as Record<PieceLetter, number>,
    black: { P: 0, N: 0, B: 0, R: 0, Q: 0, K: 0 } as Record<PieceLetter, number>,
  };

  // –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å FEN
  for (const ch of board) {
    if (/[1-8]/.test(ch)) continue;
    if (/[prnbqk]/.test(ch)) counts.black[ch.toUpperCase() as PieceLetter] += 1;
    else if (/[PRNBQK]/.test(ch)) counts.white[ch as PieceLetter] += 1;
  }

  // –ü–æ–¥—Å—á—ë—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –ø–µ—à–∫–∞—Ö
  const materialWhite =
    counts.white.P * VALS.P +
    counts.white.N * VALS.N +
    counts.white.B * VALS.B +
    counts.white.R * VALS.R +
    counts.white.Q * VALS.Q;
  const materialBlack =
    counts.black.P * VALS.P +
    counts.black.N * VALS.N +
    counts.black.B * VALS.B +
    counts.black.R * VALS.R +
    counts.black.Q * VALS.Q;

  const totalRemaining = materialWhite + materialBlack;

  const percentOfStartWhite =
    START_MATERIAL === 0 ? 0 : (materialWhite / START_MATERIAL) * 100;
  const percentOfStartBlack =
    START_MATERIAL === 0 ? 0 : (materialBlack / START_MATERIAL) * 100;

  const shareWhite =
    totalRemaining === 0 ? 50 : (materialWhite / totalRemaining) * 100;
  const shareBlack =
    totalRemaining === 0 ? 50 : (materialBlack / totalRemaining) * 100;

  // –û–∫—Ä—É–≥–ª–∏–º –¥–æ –¥–µ—Å—è—Ç—ã—Ö (–º–æ–∂–µ—à—å —É–±—Ä–∞—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ¬´—Å—ã—Ä–æ–µ¬ª –∑–Ω–∞—á–µ–Ω–∏–µ)
  const round1 = (x: number) => Math.round(x * 10) / 10;

  return {
    white: {
      pawns: materialWhite,
      percentOfStart: round1(percentOfStartWhite),
      shareOfRemaining: round1(shareWhite),
    },
    black: {
      pawns: materialBlack,
      percentOfStart: round1(percentOfStartBlack),
      shareOfRemaining: round1(shareBlack),
    },
  };
}

// üîπ –ü—Ä–∏–º–µ—Ä:
const fenExample =
  "r1bqkbnr/1ppp1ppp/p1n5/4p3/4P3/5N2/PPPP1PPP/RNBQ1RK1 b kq - 0 5";

console.log(getMaterialPercents(fenExample));
// {
//   white: { pawns: 35, percentOfStart: 100, shareOfRemaining: 50 },
//   black: { pawns: 34, percentOfStart: 97.1, shareOfRemaining: 50 }
// }
